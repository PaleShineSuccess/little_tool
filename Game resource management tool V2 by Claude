import sys
import os
import csv
import json
import shutil
from pathlib import Path
from functools import partial
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                              QHBoxLayout, QPushButton, QTabWidget, QLabel, 
                              QLineEdit, QScrollArea, QGridLayout, QFrame, 
                              QMessageBox, QFileDialog, QDialog, QSpinBox,
                              QGroupBox, QSizePolicy, QMenu, QInputDialog)
from PySide6.QtGui import QPixmap, QImage, QIcon, QColor, QPalette, QAction,QFont
from PySide6.QtCore import Qt, QSize, Signal, QMimeData
from PySide6.QtCore import QSettings

script_dir = os.path.dirname(os.path.abspath(__file__))  # 獲取腳本的目錄
os.chdir(script_dir)

class Config:
    def __init__(self):
        self.settings = QSettings("ResourceManager", "ResourceManagerApp")
        self.load_default_settings()
        
    def load_default_settings(self):
        # Set default values if settings don't exist
        if not self.settings.contains("grid_size"):
            self.settings.setValue("grid_size", 100)
        if not self.settings.contains("grid_width"):
            self.settings.setValue("grid_width", 100)
        if not self.settings.contains("grid_height"):
            self.settings.setValue("grid_height", 120)
        if not self.settings.contains("image_size"):
            self.settings.setValue("image_size", 80)
        if not self.settings.contains("group_columns"):
            self.settings.setValue("group_columns", 3)
        if not self.settings.contains("cell_columns"):
            self.settings.setValue("cell_columns", 5)
        if not self.settings.contains("zoom_level"):
            self.settings.setValue("zoom_level", 100)
        if not self.settings.contains("border_width"):
            self.settings.setValue("border_width", 1)
        if not self.settings.contains("padding"):
            self.settings.setValue("padding", 5)
        if not self.settings.contains("group_padding"):
            self.settings.setValue("group_padding", 10)
        if not self.settings.contains("element_spacing"):
            self.settings.setValue("element_spacing", 5)

    def get_grid_width(self):
        return self.settings.value("grid_width", type=int)

    def get_grid_height(self):
        return self.settings.value("grid_height", type=int)

    def get_border_width(self):
        return self.settings.value("border_width", type=int)

    def get_padding(self):
        return self.settings.value("padding", type=int)

    def get_group_padding(self):
        return self.settings.value("group_padding", type=int)

    def get_element_spacing(self):
        return self.settings.value("element_spacing", type=int)

    def set_grid_width(self, value):
        self.settings.setValue("grid_width", value)

    def set_grid_height(self, value):
        self.settings.setValue("grid_height", value)

    def set_border_width(self, value):
        self.settings.setValue("border_width", value)

    def set_padding(self, value):
        self.settings.setValue("padding", value)

    def set_group_padding(self, value):
        self.settings.setValue("group_padding", value)

    def set_element_spacing(self, value):
        self.settings.setValue("element_spacing", value)

    def get_grid_size(self):
        return self.settings.value("grid_size", type=int)
    
    def get_image_size(self):
        return self.settings.value("image_size", type=int)
    
    def get_group_columns(self):
        return self.settings.value("group_columns", type=int)
    
    def get_cell_columns(self):
        return self.settings.value("cell_columns", type=int)
    
    def get_zoom_level(self):
        return self.settings.value("zoom_level", type=int)
    
    def set_grid_size(self, value):
        self.settings.setValue("grid_size", value)
    
    def set_image_size(self, value):
        self.settings.setValue("image_size", value)
    
    def set_group_columns(self, value):
        self.settings.setValue("group_columns", value)
    
    def set_cell_columns(self, value):
        self.settings.setValue("cell_columns", value)
    
    def set_zoom_level(self, value):
        self.settings.setValue("zoom_level", value)

class ConfigDialog(QDialog):
    def __init__(self, config, parent=None):
        super().__init__(parent)
        self.config = config
        self.setWindowTitle("設置")
        self.setup_ui()
        
    def setup_ui(self):
        layout = QVBoxLayout()
        
        # Create scroll area for many settings
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_content = QWidget()
        scroll_layout = QVBoxLayout(scroll_content)
        
        # Grid size settings (now with width and height)
        grid_group = QGroupBox("格子設置")
        grid_layout = QGridLayout()
        
        # Grid width
        grid_width_label = QLabel("格子寬度:")
        self.grid_width_spin = QSpinBox()
        self.grid_width_spin.setRange(80, 500)
        self.grid_width_spin.setValue(self.config.get_grid_width())
        grid_layout.addWidget(grid_width_label, 0, 0)
        grid_layout.addWidget(self.grid_width_spin, 0, 1)
        
        # Grid height
        grid_height_label = QLabel("格子高度:")
        self.grid_height_spin = QSpinBox()
        self.grid_height_spin.setRange(80, 500)
        self.grid_height_spin.setValue(self.config.get_grid_height())
        grid_layout.addWidget(grid_height_label, 1, 0)
        grid_layout.addWidget(self.grid_height_spin, 1, 1)
        
        # Image size setting
        image_label = QLabel("圖片大小:")
        self.image_size_spin = QSpinBox()
        self.image_size_spin.setRange(30, 250)
        self.image_size_spin.setValue(self.config.get_image_size())
        grid_layout.addWidget(image_label, 2, 0)
        grid_layout.addWidget(self.image_size_spin, 2, 1)
        
        grid_group.setLayout(grid_layout)
        scroll_layout.addWidget(grid_group)
        
        # Layout settings
        layout_group = QGroupBox("佈局設置")
        layout_grid = QGridLayout()
        
        # Group columns setting
        group_label = QLabel("分頁內每行顯示群組數:")
        self.group_columns_spin = QSpinBox()
        self.group_columns_spin.setRange(1, 10)
        self.group_columns_spin.setValue(self.config.get_group_columns())
        layout_grid.addWidget(group_label, 0, 0)
        layout_grid.addWidget(self.group_columns_spin, 0, 1)
        
        # Cell columns setting
        cell_label = QLabel("群組內每行顯示格子數:")
        self.cell_columns_spin = QSpinBox()
        self.cell_columns_spin.setRange(1, 15)
        self.cell_columns_spin.setValue(self.config.get_cell_columns())
        layout_grid.addWidget(cell_label, 1, 0)
        layout_grid.addWidget(self.cell_columns_spin, 1, 1)
        
        # Border width
        border_label = QLabel("邊框粗細:")
        self.border_width_spin = QSpinBox()
        self.border_width_spin.setRange(0, 10)
        self.border_width_spin.setValue(self.config.get_border_width())
        layout_grid.addWidget(border_label, 2, 0)
        layout_grid.addWidget(self.border_width_spin, 2, 1)
        
        # Padding
        padding_label = QLabel("內邊距:")
        self.padding_spin = QSpinBox()
        self.padding_spin.setRange(0, 20)
        self.padding_spin.setValue(self.config.get_padding())
        layout_grid.addWidget(padding_label, 3, 0)
        layout_grid.addWidget(self.padding_spin, 3, 1)
        
        # Group padding
        group_padding_label = QLabel("群組內邊距:")
        self.group_padding_spin = QSpinBox()
        self.group_padding_spin.setRange(0, 30)
        self.group_padding_spin.setValue(self.config.get_group_padding())
        layout_grid.addWidget(group_padding_label, 4, 0)
        layout_grid.addWidget(self.group_padding_spin, 4, 1)
        
        # Element spacing
        spacing_label = QLabel("元素間距:")
        self.spacing_spin = QSpinBox()
        self.spacing_spin.setRange(0, 20)
        self.spacing_spin.setValue(self.config.get_element_spacing())
        layout_grid.addWidget(spacing_label, 5, 0)
        layout_grid.addWidget(self.spacing_spin, 5, 1)
        
        layout_group.setLayout(layout_grid)
        scroll_layout.addWidget(layout_group)
        
        # Zoom level setting
        zoom_group = QGroupBox("縮放設置")
        zoom_layout = QHBoxLayout()
        zoom_label = QLabel("頁面縮放比例 (%):")
        self.zoom_level_spin = QSpinBox()
        self.zoom_level_spin.setRange(50, 200)
        self.zoom_level_spin.setValue(self.config.get_zoom_level())
        self.zoom_level_spin.setSingleStep(10)
        zoom_layout.addWidget(zoom_label)
        zoom_layout.addWidget(self.zoom_level_spin)
        zoom_group.setLayout(zoom_layout)
        scroll_layout.addWidget(zoom_group)
        
        scroll_area.setWidget(scroll_content)
        layout.addWidget(scroll_area)
        
        # Add validation note
        validation_label = QLabel("注意：系統會自動檢查佈局參數合理性，避免填錯崩潰")
        validation_label.setStyleSheet("color: red;")
        layout.addWidget(validation_label)
        
        # Buttons
        button_layout = QHBoxLayout()
        save_button = QPushButton("保存")
        save_button.clicked.connect(self.validate_and_save)
        cancel_button = QPushButton("取消")
        cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(save_button)
        button_layout.addWidget(cancel_button)
        layout.addLayout(button_layout)
        
        self.setLayout(layout)
        
    def validate_and_save(self):
        # Validate settings to prevent layout issues
        grid_width = self.grid_width_spin.value()
        image_size = self.image_size_spin.value()
        cell_columns = self.cell_columns_spin.value()
        
        # Check that image fits in cell
        if image_size > grid_width - 10:
            QMessageBox.warning(self, "參數錯誤", 
                            "圖片大小太大，無法適應格子寬度，請調小圖片或增加格子寬度")
            return
        
        # Check that groups can fit cells
        min_group_width = (cell_columns * (grid_width + 5)) + 20  # approximate minimum group width
        
        # Save validated settings
        self.config.set_grid_width(self.grid_width_spin.value())
        self.config.set_grid_height(self.grid_height_spin.value())
        self.config.set_image_size(self.image_size_spin.value())
        self.config.set_group_columns(self.group_columns_spin.value())
        self.config.set_cell_columns(self.cell_columns_spin.value())
        self.config.set_zoom_level(self.zoom_level_spin.value())
        self.config.set_border_width(self.border_width_spin.value())
        self.config.set_padding(self.padding_spin.value())
        self.config.set_group_padding(self.group_padding_spin.value())
        self.config.set_element_spacing(self.spacing_spin.value())
        self.accept()
        
    def save_settings(self):
        self.config.set_grid_size(self.grid_size_spin.value())
        self.config.set_image_size(self.image_size_spin.value())
        self.config.set_group_columns(self.group_columns_spin.value())
        self.config.set_cell_columns(self.cell_columns_spin.value())
        self.config.set_zoom_level(self.zoom_level_spin.value())
        self.accept()

class ResourceCell(QFrame):
    swap_requested = Signal(object)
    
    def __init__(self, name, img_path, quantity, max_quantity, parent=None, config=None):
        super().__init__(parent)
        self.name = name
        self.img_path = img_path
        self.quantity = quantity
        self.max_quantity = max_quantity
        self.config = config
        self.swap_mode = False
        self.setup_ui()
        self.update_appearance()
        
    def setup_ui(self):
        # 設置字體大小
        font = QFont()
        font.setPointSize(15)  # 設置字體大小為12
        #self.setFont(font)

        self.setFrameStyle(QFrame.Box | QFrame.Raised)
        self.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        
        grid_width = self.config.get_grid_width()
        grid_height = self.config.get_grid_height()
        
        self.setMinimumSize(grid_width, grid_height)
        self.setMaximumSize(grid_width, grid_height)
        
        main_layout = QVBoxLayout(self)
        
        # Name field
        self.name_edit = QLineEdit(self.name)
        self.name_edit.setAlignment(Qt.AlignCenter)
        #self.name_edit.setFont(font)  # 設置字體大小
        main_layout.addWidget(self.name_edit)
        
        # Image
        self.image_label = QLabel()
        self.image_label.setAlignment(Qt.AlignCenter)
        self.update_image()  # 確保圖片大小根據配置更新
        main_layout.addWidget(self.image_label)
        
        # Quantity controls
        quantity_layout = QHBoxLayout()
        
        decrease_btn = QPushButton("-")
        decrease_btn.setMaximumWidth(10)
        decrease_btn.clicked.connect(self.decrease_quantity)
        
        self.quantity_label = QLabel(f"{self.quantity}/{self.max_quantity}")
        self.quantity_label.setAlignment(Qt.AlignCenter)
        self.quantity_label.setFont(font)  # 設置字體大小
        increase_btn = QPushButton("+")
        increase_btn.setMaximumWidth(10)
        increase_btn.clicked.connect(self.increase_quantity)
        
        quantity1_layout = QHBoxLayout()
        quantity1_layout.addWidget(self.quantity_label)
        main_layout.addLayout(quantity1_layout)
        quantity_layout.addWidget(decrease_btn)
        quantity_layout.addWidget(increase_btn)
        main_layout.addLayout(quantity_layout)
        
        # Max quantity controls
        max_quantity_layout = QHBoxLayout()
        max_quantity_label = QLabel("最大數量:")
        #max_quantity_label.setFont(15)  # 設置字體大小
        self.max_quantity_edit = QLineEdit(str(self.max_quantity))
        self.max_quantity_edit.setAlignment(Qt.AlignCenter)
        #self.max_quantity_edit.setValidator(QIntValidator(1, 9999))  # 限制輸入為1到9999的整數
        self.max_quantity_edit.editingFinished.connect(self.update_max_quantity)
        #self.max_quantity_edit.setFont(font)  # 設置字體大小
        max_quantity_layout.addWidget(max_quantity_label)
        max_quantity_layout.addWidget(self.max_quantity_edit)
        main_layout.addLayout(max_quantity_layout)

        # Control buttons
        button_layout = QHBoxLayout()
        
        swap_btn = QPushButton("交換")
        swap_btn.clicked.connect(self.request_swap)
        #swap_btn.setFont(font)  # 設置字體大小

        delete_btn = QPushButton("刪除")
        delete_btn.clicked.connect(self.delete_cell)
        #delete_btn.setFont(font)  # 設置字體大小

        button_layout.addWidget(swap_btn)
        button_layout.addWidget(delete_btn)
        main_layout.addLayout(button_layout)
        
        self.setLayout(main_layout)


    def update_max_quantity(self):
        try:
            new_max_quantity = int(self.max_quantity_edit.text())
            if new_max_quantity > 0:
                self.max_quantity = new_max_quantity
                self.update_appearance()
        except ValueError:
            # 如果輸入無效，恢復原值
            self.max_quantity_edit.setText(str(self.max_quantity))

    def update_image(self):
        image_size = self.config.get_image_size()
        if os.path.exists(self.img_path):
            pixmap = QPixmap(self.img_path)
            # Calculate dimensions to maintain aspect ratio while fitting in the specified area
            scaled_pixmap = pixmap.scaled(
                image_size, image_size, 
                Qt.KeepAspectRatio, 
                Qt.SmoothTransformation
            )
            self.image_label.setPixmap(scaled_pixmap)
            # Center the image
            self.image_label.setAlignment(Qt.AlignCenter)
        else:
            self.image_label.setText("圖片未找到")
            self.image_label.setAlignment(Qt.AlignCenter)

    def update_appearance(self):
        # Set label text
        self.quantity_label.setText(f"{self.quantity}/{self.max_quantity}")
        
        # Update color based on quantity
        if self.quantity < self.max_quantity:
            self.quantity_label.setStyleSheet("QLabel { color: red; }")
        elif self.quantity == self.max_quantity:
            self.quantity_label.setStyleSheet("QLabel { color: yellow; }")
        else:  # greater than max
            self.quantity_label.setStyleSheet("QLabel { color: yellow; }")
            self.setStyleSheet("QFrame { background-color: #FFCCCC; }")
            return
        
        self.setStyleSheet("")  # Reset background if not greater than max
        
    def increase_quantity(self):
        self.quantity += 1
        self.update_appearance()
        
    def decrease_quantity(self):
        if self.quantity > 0:
            self.quantity -= 1
            self.update_appearance()
            
    def request_swap(self):
        self.swap_requested.emit(self)
        
    def delete_cell(self):
        reply = QMessageBox.question(self, "確認刪除", 
                                     f"確定要刪除格子 \"{self.name}\" 嗎?", 
                                     QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.deleteLater()
            
    def get_data(self):
        return {
            "name": self.name_edit.text(),
            "img_path": self.img_path,
            "quantity": self.quantity,
            "max_quantity": self.max_quantity
        }
    
    def update_from_config(self):
        grid_width = self.config.get_grid_width()
        grid_height = self.config.get_grid_height()
        padding = self.config.get_padding()
        border_width = self.config.get_border_width()
        
        self.setMinimumSize(grid_width, grid_height)
        self.setMaximumSize(grid_width, grid_height)
        
        # Update frame style with new border width
        self.setFrameStyle(QFrame.Box | QFrame.Raised)
        self.setLineWidth(border_width)
        
        # Update layout margins
        layout = self.layout()
        if layout:
            layout.setContentsMargins(padding, padding, padding, padding)
            layout.setSpacing(self.config.get_element_spacing())
        
        self.update_image()


class ResourceGroup(QGroupBox):
    def __init__(self, name, parent=None, config=None):
        super().__init__(parent)
        self.name = name
        self.config = config
        self.is_expanded = True
        self.cells = []
        self.swap_cell_1 = None
        self.setup_ui()
        
    def setup_ui(self):
        self.setTitle(self.name)
        self.setCheckable(True)
        self.setChecked(True)
        self.toggled.connect(self.toggle_expand)
        
        main_layout = QVBoxLayout(self)
        
        # Header controls
        header_layout = QHBoxLayout()
        
        self.name_edit = QLineEdit(self.name)
        self.name_edit.textChanged.connect(self.update_title)
        
        add_cell_btn = QPushButton("新增格子")
        add_cell_btn.clicked.connect(self.add_cell)
        
        delete_group_btn = QPushButton("刪除群組")
        delete_group_btn.clicked.connect(self.delete_group)
        
        header_layout.addWidget(self.name_edit)
        header_layout.addWidget(add_cell_btn)
        header_layout.addWidget(delete_group_btn)
        
        main_layout.addLayout(header_layout)
        
        # Cells grid layout
        self.cells_widget = QWidget()
        self.cells_layout = QGridLayout(self.cells_widget)
        
        main_layout.addWidget(self.cells_widget)
        
    def update_title(self):
        self.name = self.name_edit.text()
        self.setTitle(self.name)
        
    def toggle_expand(self, checked):
        self.is_expanded = checked
        self.cells_widget.setVisible(checked)
        
    def add_cell(self, name="新格子", img_path="", quantity=0, max_quantity=10):
        if not img_path:
            img_path, _ = QFileDialog.getOpenFileName(self, "選擇圖片", "", "圖片檔案 (*.png *.jpg *.jpeg *.bmp)")
            if not img_path:
                img_path = "placeholder.png"  # Default placeholder
                
        name = os.path.basename(img_path).split('.')[0] if name == "新格子" else name
                
        cell = ResourceCell(name, img_path, quantity, max_quantity, config=self.config)
        cell.swap_requested.connect(self.handle_swap_request)
        
        self.cells.append(cell)
        
        # Arrange cells in grid
        columns = self.config.get_cell_columns()
        row, col = divmod(len(self.cells) - 1, columns)
        self.cells_layout.addWidget(cell, row, col)
        
    def delete_group(self):
        reply = QMessageBox.question(self, "確認刪除", 
                                    f"確定要刪除群組 \"{self.name}\" 和其中所有格子嗎?", 
                                    QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.deleteLater()
            
    def handle_swap_request(self, cell):
        if self.swap_cell_1 is None:
            self.swap_cell_1 = cell
            cell.setStyleSheet("QFrame { border: 2px solid blue; }")
            #QMessageBox.information(self, "交換模式", "已選擇第一個格子，請選擇第二個格子進行交換。")
        else:
            self.swap_cells(self.swap_cell_1, cell)
            self.swap_cell_1.setStyleSheet("")
            self.swap_cell_1 = None
            
    def swap_cells(self, cell1, cell2):
        # Swap data
        data1 = cell1.get_data()
        data2 = cell2.get_data()
        
        cell1.name = data2["name"]
        cell1.img_path = data2["img_path"]
        cell1.quantity = data2["quantity"]
        cell1.max_quantity = data2["max_quantity"]
        
        cell2.name = data1["name"]
        cell2.img_path = data1["img_path"]
        cell2.quantity = data1["quantity"]
        cell2.max_quantity = data1["max_quantity"]
        
        # Update UI
        cell1.name_edit.setText(cell1.name)
        cell1.update_image()
        cell1.update_appearance()
        
        cell2.name_edit.setText(cell2.name)
        cell2.update_image()
        cell2.update_appearance()
        
    def get_data(self):
        group_data = {
            "name": self.name,
            "cells": []
        }
        
        for cell in self.cells:
            if not cell.isHidden() and not cell.isDestroyed():
                group_data["cells"].append(cell.get_data())
                
        return group_data
    
    def reorganize_grid(self):
        # Remove all cells from layout
        for i in reversed(range(self.cells_layout.count())):
            self.cells_layout.itemAt(i).widget().setParent(None)
            
        # Add cells back using current column setting
        columns = self.config.get_cell_columns()
        for i, cell in enumerate(self.cells):
            if not cell.isHidden() and hasattr(cell, 'isDestroyed') and not cell.isDestroyed():
                row, col = divmod(i, columns)
                self.cells_layout.addWidget(cell, row, col)
                
    def update_from_config(self):
        # Update layout settings
        group_padding = self.config.get_group_padding()
        element_spacing = self.config.get_element_spacing()
        
        if self.layout():
            self.layout().setContentsMargins(group_padding, group_padding, group_padding, group_padding)
            self.layout().setSpacing(element_spacing)
        
        # Update all cells
        for cell in self.cells:
            cell.update_from_config()
        
        # Reorganize grid
        self.reorganize_grid()

class PageWidget(QWidget):
    def __init__(self, name, parent=None, config=None):
        super().__init__(parent)
        self.name = name
        self.config = config
        self.groups = []
        self.setup_ui()
        
    def setup_ui(self):
        main_layout = QVBoxLayout(self)
        
        # Header controls
        header_layout = QHBoxLayout()
        
        add_group_btn = QPushButton("新建群組")
        add_group_btn.clicked.connect(self.add_group)
        
        header_layout.addWidget(add_group_btn)
        
        main_layout.addLayout(header_layout)
        
        # Scroll area for groups
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        
        self.groups_widget = QWidget()
        self.groups_layout = QGridLayout(self.groups_widget)
        
        scroll_area.setWidget(self.groups_widget)
        main_layout.addWidget(scroll_area)
        
    def add_group(self, name="新群組", cells_data=None):
        group = ResourceGroup(name, config=self.config)
        self.groups.append(group)
        
        # Arrange groups in grid
        columns = self.config.get_group_columns()
        row, col = divmod(len(self.groups) - 1, columns)
        self.groups_layout.addWidget(group, row, col)
        
        # Add cells if data provided
        if cells_data:
            for cell_data in cells_data:
                group.add_cell(
                    name=cell_data["name"],
                    img_path=cell_data["img_path"],
                    quantity=cell_data["quantity"],
                    max_quantity=cell_data["max_quantity"]
                )
                
        return group
    
    def get_data(self):
        page_data = {
            "name": self.name,
            "groups": []
        }
        
        for group in self.groups:
            if not group.isHidden():
                page_data["groups"].append(group.get_data())
                
        return page_data
    
    def reorganize_grid(self):
        # Remove all groups from layout
        for i in reversed(range(self.groups_layout.count())):
            widget = self.groups_layout.itemAt(i).widget()
            if widget:
                widget.setParent(None)
            
        # Add groups back using current column setting
        columns = self.config.get_group_columns()
        for i, group in enumerate(self.groups):
            if not group.isHidden():
                row, col = divmod(i, columns)
                self.groups_layout.addWidget(group, row, col)
    
    def update_from_config(self):
        for group in self.groups:
            group.update_from_config()
        self.reorganize_grid()

class ResourceManager(QMainWindow):
    def __init__(self):
        super().__init__()
        self.config = Config()
        self.data_file = "resource_data.csv"
        self.setup_ui()
        
    def setup_ui(self):
        self.setWindowTitle("資源管理工具")
        self.resize(1200, 800)
        
        # Main layout
        central_widget = QWidget()
        main_layout = QVBoxLayout(central_widget)
        
        # Tab widget for pages
        self.tab_widget = QTabWidget()
        self.tab_widget.setTabsClosable(True)
        self.tab_widget.tabCloseRequested.connect(self.close_tab)
        self.tab_widget.setTabsClosable(True)
        self.tab_widget.tabCloseRequested.connect(self.close_tab)
        self.tab_widget.tabBar().tabBarDoubleClicked.connect(self.rename_tab)
        # Tab controls
        tab_controls = QHBoxLayout()
        
        add_page_btn = QPushButton("新建分頁")
        add_page_btn.clicked.connect(self.add_page)
        
        import_btn = QPushButton("批量導入圖片")
        import_btn.clicked.connect(self.import_images)
        
        settings_btn = QPushButton("設置")
        settings_btn.clicked.connect(self.open_settings)
        
        save_btn = QPushButton("保存數據")
        save_btn.clicked.connect(self.save_data)
        
        load_btn = QPushButton("載入數據")
        load_btn.clicked.connect(self.load_data)
        
        tab_controls.addWidget(add_page_btn)
        tab_controls.addWidget(import_btn)
        tab_controls.addWidget(settings_btn)
        tab_controls.addWidget(save_btn)
        tab_controls.addWidget(load_btn)
        
        main_layout.addLayout(tab_controls)
        main_layout.addWidget(self.tab_widget)
        
        self.setCentralWidget(central_widget)
        
        # Create first page
        self.add_page()
        
        # Load data if exists
        if os.path.exists(self.data_file):
            self.load_data()
            
    def add_page(self, name="新分頁", page_data=None):
        page = PageWidget(name, config=self.config)
        
        # Add a custom name edit
        index = self.tab_widget.addTab(page, name)
        self.tab_widget.setCurrentIndex(index)
        
        # Double click to edit page name
        self.tab_widget.tabBar().setTabData(index, name)
        self.tab_widget.tabBar().tabBarDoubleClicked.connect(self.rename_tab)
        
        # Add groups if data provided
        if page_data:
            for group_data in page_data.get("groups", []):
                page.add_group(
                    name=group_data["name"],
                    cells_data=group_data.get("cells", [])
                )
                
        return page
    
    
    def rename_tab(self, index):
        current_name = self.tab_widget.tabBar().tabData(index)
        new_name, ok = QInputDialog.getText(self, "重命名分頁", "輸入新名稱:", text=current_name)
        
        if ok and new_name:
            self.tab_widget.setTabText(index, new_name)
            self.tab_widget.tabBar().setTabData(index, new_name)
            
            # Update page name
            page = self.tab_widget.widget(index)
            if isinstance(page, PageWidget):
                page.name = new_name
    
    def close_tab(self, index):
        reply = QMessageBox.question(self, "確認刪除", 
                                    "確定要刪除此分頁和其中所有內容嗎?", 
                                    QMessageBox.Yes | QMessageBox.No)
        if reply == QMessageBox.Yes:
            self.tab_widget.removeTab(index)
            
            # Create a new page if no pages left
            if self.tab_widget.count() == 0:
                self.add_page()
    
    def import_images(self):
        # Select folder with images
        folder_path = QFileDialog.getExistingDirectory(self, "選擇圖片文件夾")
        if not folder_path:
            return
            
        # Get image files
        image_files = []
        for ext in ['*.png', '*.jpg', '*.jpeg', '*.bmp']:
            image_files.extend(Path(folder_path).glob(ext))
            
        if not image_files:
            QMessageBox.warning(self, "警告", "找不到圖片文件!")
            return
            
        # Ask to create new page or use current
        reply = QMessageBox.question(self, "選擇操作", 
                                    f"找到 {len(image_files)} 張圖片。創建新分頁還是使用當前分頁?",
                                    QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:  # Create new page
            page = self.add_page(name=f"導入 {len(image_files)} 張圖片")
        else:  # Use current page
            index = self.tab_widget.currentIndex()
            page = self.tab_widget.widget(index)
            
        # Create new group for imported images
        group_name, ok = QInputDialog.getText(self, "群組名稱", "輸入新群組名稱:", text="導入圖片群組")
        
        if not ok:
            group_name = "導入圖片群組"
            
        group = page.add_group(name=group_name)
        
        # Add images as cells
        for img_file in image_files:
            name = img_file.stem
            group.add_cell(name=name, img_path=str(img_file), quantity=0, max_quantity=10)
            
        QMessageBox.information(self, "導入完成", f"成功導入 {len(image_files)} 張圖片!")
    
    def open_settings(self):
        # Create backup before changing settings
        self.create_backup()
        
        dialog = ConfigDialog(self.config, self)
        if dialog.exec_():
            try:
                # Update visual aspects without reloading data
                for i in range(self.tab_widget.count()):
                    page = self.tab_widget.widget(i)
                    if isinstance(page, PageWidget):
                        page.update_from_config()
            except Exception as e:
                QMessageBox.critical(self, "更新設置失敗", f"更新設置時出錯: {str(e)}")
                self.restore_from_backup()

    def create_backup(self):
        """Create backup of current data"""
        backup_file = self.data_file + ".bak"
        if os.path.exists(self.data_file):
            shutil.copy2(self.data_file, backup_file)
        
        config_backup = "resource_config.json.bak"
        if os.path.exists("resource_config.json"):
            shutil.copy2("resource_config.json", config_backup)

    def restore_from_backup(self):
        """Restore data from backup if available"""
        backup_file = self.data_file + ".bak"
        if os.path.exists(backup_file):
            shutil.copy2(backup_file, self.data_file)
            
        config_backup = "resource_config.json.bak"
        if os.path.exists(config_backup):
            shutil.copy2(config_backup, "resource_config.json")
            
        # Reload data
        self.load_data()

    def save_data(self):
        try:
            # Save configuration to separate config file with all parameters
            config_data = {
                "grid_width": self.config.get_grid_width(),
                "grid_height": self.config.get_grid_height(),
                "image_size": self.config.get_image_size(),
                "group_columns": self.config.get_group_columns(),
                "cell_columns": self.config.get_cell_columns(),
                "zoom_level": self.config.get_zoom_level(),
                "border_width": self.config.get_border_width(),
                "padding": self.config.get_padding(),
                "group_padding": self.config.get_group_padding(),
                "element_spacing": self.config.get_element_spacing()
            }
            with open("resource_config.json", 'w', encoding='utf-8') as config_file:
                json.dump(config_data, config_file)
        
            # 按照指定格式保存資料
            with open(self.data_file, 'w', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerow(["page_index", "page_name", "group_index", "group_name", 
                           "item_index", "item_name", "image_path", "current_quantity", 
                           "max_quantity", "page_columns", "group_columns"])
            
                for page_idx in range(self.tab_widget.count()):
                    page = self.tab_widget.widget(page_idx)
                    page_name = self.tab_widget.tabText(page_idx)
                
                    if isinstance(page, PageWidget):
                        for group_idx, group in enumerate(page.groups):
                            if group.isHidden():
                                continue
                        
                            for cell_idx, cell in enumerate(group.cells):
                                if cell.isHidden():
                                    continue
                            
                                data = cell.get_data()
                                row = [
                                    page_idx,
                                    page_name,
                                    group_idx,
                                    group.name,
                                    cell_idx,
                                    data["name"],
                                    data["img_path"],
                                    data["quantity"],
                                    data["max_quantity"],
                                    self.config.get_group_columns(),
                                    self.config.get_cell_columns()
                                ]
                                writer.writerow(row)
            
            QMessageBox.information(self, "保存成功", f"數據已保存到 {self.data_file}")
        except Exception as e:
            QMessageBox.critical(self, "保存失敗", f"保存數據出錯: {str(e)}")


    def load_data(self):
        if not os.path.exists(self.data_file):
            return
            
        try:
            # 清除現有標籤
            while self.tab_widget.count() > 0:
                self.tab_widget.removeTab(0)
                
            pages_data = {}  # 用於存儲頁面數據的字典
            
            # 載入配置（如果存在）
            if os.path.exists("resource_config.json"):
                try:
                    with open("resource_config.json", 'r', encoding='utf-8') as config_file:
                        config_data = json.load(config_file)
                        self.config.set_grid_width(config_data.get("grid_width", 100))
                        self.config.set_grid_height(config_data.get("grid_height", 120))
                        self.config.set_image_size(config_data.get("image_size", 80))
                        self.config.set_group_columns(config_data.get("group_columns", 3))
                        self.config.set_cell_columns(config_data.get("cell_columns", 5))
                        self.config.set_zoom_level(config_data.get("zoom_level", 100))
                        self.config.set_border_width(config_data.get("border_width", 1))
                        self.config.set_padding(config_data.get("padding", 5))
                        self.config.set_group_padding(config_data.get("group_padding", 10))
                        self.config.set_element_spacing(config_data.get("element_spacing", 5))
                except Exception as e:
                    print(f"Error loading config: {str(e)}")
                    
            with open(self.data_file, 'r', newline='', encoding='utf-8') as file:
                reader = csv.reader(file)
                next(reader)  # 跳過標題行
                
                for row in reader:
                    if not row or len(row) < 11:
                        continue
                        
                    page_idx, page_name = int(row[0]), row[1]
                    group_idx, group_name = int(row[2]), row[3]
                    cell_idx, cell_name = int(row[4]), row[5]
                    img_path = row[6]
                    quantity, max_quantity = int(row[7]), int(row[8])
                    
                    # 初始化頁面數據（如果不存在）
                    if page_idx not in pages_data:
                        pages_data[page_idx] = {"name": page_name, "groups": {}}
                        
                    # 初始化群組數據（如果不存在）
                    if group_idx not in pages_data[page_idx]["groups"]:
                        pages_data[page_idx]["groups"][group_idx] = {"name": group_name, "cells": []}
                        
                    # 添加格子數據
                    cell_data = {
                        "name": cell_name,
                        "img_path": img_path,
                        "quantity": quantity,
                        "max_quantity": max_quantity
                    }
                    # 檢查格子是否已經存在，避免重複添加
                    if cell_data not in pages_data[page_idx]["groups"][group_idx]["cells"]:
                        pages_data[page_idx]["groups"][group_idx]["cells"].append(cell_data)
            
            # 根據載入的數據重建UI
            for page_idx in sorted(pages_data.keys()):
                page_data = pages_data[page_idx]
                page = self.add_page(name=page_data["name"])
                
                for group_idx in sorted(page_data["groups"].keys()):
                    group_data = page_data["groups"][group_idx]
                    group = page.add_group(name=group_data["name"])
                    
                    for cell_data in group_data["cells"]:
                        group.add_cell(
                            name=cell_data["name"],
                            img_path=cell_data["img_path"],
                            quantity=cell_data["quantity"],
                            max_quantity=cell_data["max_quantity"]
                        )
            
        except Exception as e:
            QMessageBox.critical(self, "載入失敗", f"載入數據出錯: {str(e)}")



if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyle("Fusion")  # Modern look


    # font = QFont()
    # font.setPointSize(12)  # 設置字體大小為12
    # app.setFont(font)

    # Set dark palette
    dark_palette = QPalette()
    dark_palette.setColor(QPalette.Window, QColor(53, 53, 53))
    dark_palette.setColor(QPalette.WindowText, Qt.white)
    dark_palette.setColor(QPalette.Base, QColor(25, 25, 25))
    dark_palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
    dark_palette.setColor(QPalette.ToolTipBase, Qt.white)
    dark_palette.setColor(QPalette.ToolTipText, Qt.white)
    dark_palette.setColor(QPalette.Text, Qt.white)
    dark_palette.setColor(QPalette.Button, QColor(53, 53, 53))
    dark_palette.setColor(QPalette.ButtonText, Qt.white)
    dark_palette.setColor(QPalette.BrightText, Qt.red)
    dark_palette.setColor(QPalette.Link, QColor(42, 130, 218))
    dark_palette.setColor(QPalette.Highlight, QColor(42, 130, 218))
    dark_palette.setColor(QPalette.HighlightedText, Qt.black)
    app.setPalette(dark_palette)

    window = ResourceManager()
    window.show()
    sys.exit(app.exec())
